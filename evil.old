;; CONFIGURAZIONI PER ELISP VECCHIE, EMACS KEYBINDINGS ARE MY FRIENDS
;; NOW
(use-package evil
  :ensure t
  :init
  (setq evil-want-C-u-scroll t)
  :config
  (evil-mode 1)
  (define-key evil-normal-state-map (kbd "<tab>") 'indent-for-tab-command)
  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
  
  (defun wrap-with-char (beg end open-char &optional close-char)
    (goto-char beg)
    (insert open-char)
    (goto-char (1+ end))
    (insert 
     (if close-char 
	 close-char 
       open-char))
    (goto-char beg)
    (evil-insert 1))

  (evil-define-operator wrap-with-brackets (beg end)
    (wrap-with-char beg end "(" ")"))
  (evil-define-operator wrap-with-quotes (beg end)
    (wrap-with-char beg end "'"))
  (evil-define-operator wrap-with-double-quotes (beg end)
    (wrap-with-char beg end "\""))
  (evil-define-operator wrap-with-square-brackets (beg end)
    (wrap-with-char beg end "[" "]"))
  (evil-define-operator wrap-with-curly-brackets (beg end)
    (wrap-with-char beg end "{" "}"))
  (evil-define-operator wrap-with-comment-region (beg end)
    (wrap-with-char beg end "/*" "*/"))
  
  (evil-define-key 'visual global-map (kbd "(") 'wrap-with-brackets)
  (evil-define-key 'visual global-map (kbd "'") 'wrap-with-quotes)
  (evil-define-key 'visual global-map (kbd "\"") 'wrap-with-double-quotes)
  (evil-define-key 'visual global-map (kbd "[") 'wrap-with-square-brackets)
  (evil-define-key 'visual global-map (kbd "{") 'wrap-with-curly-brackets)
  (evil-define-key 'visual global-map (kbd "/*") 'wrap-with-comment-region))

(use-package evil-magit
  :ensure t
  :config
  (setq evil-magit-use-y-for-yank t))

;; tra i keybind di helm-swoop (define-key evil-motion-state-map (kbd "C-c C-s") 'helm-swoop-from-evil-search)
(use-package helm-swoop
  :ensure t
  :config
  (global-set-key (kbd "C-s") 'helm-swoop)
  (global-set-key (kbd "M-S") 'helm-swoop-back-to-last-point)
  (global-set-key (kbd "C-c C-s") 'helm-multi-swoop)
  (global-set-key (kbd "C-x M-s") 'helm-multi-swoop-all)

  (define-key helm-swoop-map (kbd "C-s") 'helm-multi-swoop-all-from-helm-swoop)
  (define-key helm-swoop-map (kbd "C-m") 'helm-multi-swoop-current-mode-from-helm-swoop)

  (define-key helm-swoop-map (kbd "C-k") 'helm-previous-line)
  (define-key helm-swoop-map (kbd "C-j") 'helm-next-line)
  (define-key helm-multi-swoop-map (kbd "C-k") 'helm-previous-line)
  (define-key helm-multi-swoop-map (kbd "C-j") 'helm-next-line)

  (setq helm-multi-swoop-edit-save t)
  (setq helm-swoop-split-with-multiple-windows t)
  (setq helm-swoop-split-direction 'split-window-vertically)
  (setq helm-swoop-speed-or-color t)
  (setq helm-swoop-move-to-line-cycle t)
  (setq helm-swoop-use-line-number-face t)
  (setq helm-swoop-use-fuzzy-match t))
;; SPACELINE
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
  (spaceline-helm-mode)
  (spaceline-spacemacs-theme))

 (defvar lz/custom-theme-list
  nil
  "list of custom theme packages to install if not already
  installed at startup")

(setq lz/custom-theme-list
      '(material-theme 
	cyberpunk-theme 
	afternoon-theme 
	zenburn-theme 
	doom-themes
	flucui-themes 
	hemisu-theme 
	moe-theme))

(defvar lz/choosen-themes
  nil
  "List of *installed* themes to choose a random from")

;; nil per il tema di default
(setq lz/choosen-themes
      '(cyberpunk
	flucui-light
	flucui-dark
	leuven
	doom-Iosvkem
	doom-one-light
	doom-city-lights
	doom-dark+
	doom-material))

(dolist (theme lz/custom-theme-list)
  (unless (package-installed-p theme)
    (package-install theme)))

(defun disable-all-themes-in-list (themes-list)
  (dolist (theme themes-list)
    (disable-theme theme)))

(defun lz/random-theme ()
  "Disable all current themes and loads a new radom theme from
lz/choosen-themes"
  (disable-all-themes-in-list custom-enabled-themes)
  (load-theme 
   (nth 
    (random n
     (length lz/choosen-themes)) 
    lz/choosen-themes) 
   t))

;; Disabilita tutti i temi abilitati e carica uno randomico
 selezionato da una lista specifica all'avvio di ogni frame
 (add-hook 'before-make-frame-hook 'lz/random-theme)
